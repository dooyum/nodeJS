# This class is the namespace for all other classes used in the application.
# It also has some utility functions for logging and compiling HTML templates.
class Koemei

  @Model: {}
  @View: {}
  @Collection: {}


  # otherwise it does not work.
  Backbone.emulateJSON = true


  @getParameterByName: (name) ->
    match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search)
    match and decodeURIComponent(match[1].replace(/\+/g, ' '))


  ###
  Setup safe Koemei.log and Koemei.error helper functions. This will
  log to the console if it available, or do nothing.

  This has two key design features:

  1. This call shouldn't fail if there's no console available, which is
  the case in IE7 and FF < 12 if the console isn't currently open.
  2. Much like direct calls to console.log(), you should be able to see
  the source file and line from which Koemei.log() was called. Most
  modern browsers give you this information, but most console.log
  wrappers will override it. This works in Chrome/Safari, IE9,
  FF >= 12, and FF < 12 if the console is open when the page loads.
  ###
  _createSafeLogger = (fn) ->
    # Look for console.log and native Function#bind because this gives us #2
    if window.console and
        window.console[fn] and
        Function.prototype.bind and
        Function.prototype.bind.toString().indexOf('native code') != -1
      return window.console[fn].bind(console)

    # Fallback to a function that looks for the window again at runtime.
    # FF < 12 adds the console object only when it is open.
    return () ->
      if window.console and window.console[fn]
        # In IE8, console.log is not a proper Function, and arguments is not an
        # Array -- they don't have an apply or slice methods respectively.
        # This is just a very roundabout way of calling:
        # window.console.log.apply(window.console, arguments);
        Function.prototype.apply.call(
          window.console[fn]
          window.console
          Array.prototype.slice.call(arguments)
        )

  # Sets the `debug` attribute to given value, unless a parameter `kw_debug` is
  # provided in the URL (which will override any value given here).
  @setDebug: (value) ->
    param = @getParameterByName 'kw_debug'
    if param?
      debug = param is 'true' or param is 'on' or param is '1'
    else
      debug = value
    Koemei.log = if debug then _createSafeLogger 'log' else ->
    Koemei.warn = if debug then _createSafeLogger 'warn' else ->
    Koemei.error = if debug then _createSafeLogger 'error' else ->

  # Debug is disabled by default.
  @setDebug false


  # Returns a string in the format HH:mm:ss (hours is only used if needed).
  # @param seconds (integer or string)
  @secsToString: (seconds, forceHours = no) ->
    duration = moment.duration +seconds, 'seconds'
    result = _pad(duration.minutes()) + ':' + _pad(duration.seconds())
    hours = duration.hours()
    if hours > 0 or forceHours
      result = _pad(hours) + ':' + result
    result


  # Returns a fuzzy date interval (eg: '2 days ago') generated by momentjs.
  # @param date (string)
  # @param format (string): [optional] see momentjs string parsing
  @dateToFuzzy: (date, format = 'YYYY-MM-DD HH:mm:ss.SSSZ') ->
    fuzzy = moment.utc date, format
    fuzzy.from moment.utc()

  # Pads a number with a zero if it has only 1 digit.
  _pad = (number) ->
    if number < 10
      '0' + number
    else
      number